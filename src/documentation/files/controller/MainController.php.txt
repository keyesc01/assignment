<?php
/**
 * main controller
 */
namespace Itb\controller;

use Itb\Model\Belt;
use Itb\Model\Student;
use Itb\Model\Grading;
use Itb\Model\Attendance;
use Itb\Model\Technique;
use Mattsmithdev\PdoCrud\DatabaseTable;
use Silex\Application;
use Symfony\Component\HttpFoundation\Request;

/**
 * Class MainController
 * @package Itb\controller
 */
class MainController
{
    /**
     * index action
     * @param Request $request
     * @param Application $app
     * @return mixed
     */
    public function indexAction(Request $request, Application $app)
    {
        $argsArray = [];


        $templateName = 'index';
        return $app['twig']->render($templateName . '.html.twig', $argsArray);
    }

    /**
     * admin action
     * @param Request $request
     * @param Application $app
     * @return mixed
     */
    public function adminAction(Request $request, Application $app)
    {


            //        $studentRepository = new StudentRepository();
            $students = Student::getAll();
        $gradings = Grading::getAll();
        $attendances = Attendance::getAll();
        $techniques = Technique::getAll();

        $argsArray = [
                'students' => $students,
                'gradings' => $gradings,
                'attendances' => $attendances,
                'techniques' => $techniques
            ];

        $templateName = 'admin';

        return $app['twig']->render($templateName . '.html.twig', $argsArray);
    }

    /**
     * members action
     * @param Request $request
     * @param Application $app
     * @return mixed
     */
    public function membersAction(Request $request, Application $app)
    {
        $argsArray = [];


        $templateName = 'members';
        return $app['twig']->render($templateName . '.html.twig', $argsArray);
    }

    /**
     * list action
     * @param Request $request
     * @param Application $app
     * @return mixed
     */
//    public function listAction(Request $request, Application $app)
//    {
//        //$studentRepository = new Student();
//        $students = Student::getAll();
//
////        $gradeRepository = new Grading();
//        $gradings = Grading::getAll();
//
//        $argsArray = [
//            'students' => $students,
//            'gradings' => $gradings
//        ];
//
//        $templateName = 'list';
//        return $app['twig']->render($templateName . '.html.twig', $argsArray);
//    }

    /**
     * days action
     * @param Request $request
     * @param Application $app
     * @return mixed
     */
    public function daysAction(Request $request, Application $app)
    {
        $techniques = Technique::getAll();

        $argsArray = [
            'techniques' => $techniques
        ];

        $templateName = 'days';
        return $app['twig']->render($templateName . '.html.twig', $argsArray);
    }

    /**
     * insert action
     * @param Request $request
     * @param Application $app
     * @return mixed
     */
    public function insertAction(Request $request, Application $app)
    {
        $students = Student::getAll();

        $argsArray = [
            'students' => $students
        ];

        $templateName = 'newStudentForm';
        return $app['twig']->render($templateName . '.html.twig', $argsArray);
//        $db = new DatabaseManager();
//        $connection = $db->getDbh();
//
//        $statement = $connection->prepare('INSERT into ' . static::getTableName()  . ' WHERE id=:id');
//        $statement->bindParam(':id', $id, \PDO::PARAM_INT);
//        $queryWasSuccessful = $statement->execute();
//        return $queryWasSuccessful;
    }

    /**
     * delete action
     * @param Request $request
     * @param Application $app
     * @param $id
     * @return \Symfony\Component\HttpFoundation\RedirectResponse
     */
    public function deleteAction(Request $request, Application $app, $id)
    {
        $students = Student::delete($id);

        return $app->redirect('/admin');
//        header('Location: '.$_SERVER['REQUEST_URI']);
    }

    /**
     * update action
     * @param Request $request
     * @param Application $app
     * @param $id
     * @return mixed
     */
    public function updateAction(Request $request, Application $app, $id)
    {
        $student = Student::getOneById($id);


        $argsArray = [
            'student' => $student
        ];

        $templateName = 'updateStudentForm';
        return $app['twig']->render($templateName . '.html.twig', $argsArray);
    }

    /**
     * update action
     * @param Request $request
     * @param Application $app
     * @param $id
     * @return \Symfony\Component\HttpFoundation\RedirectResponse
     */
    public function updateUserAction(Request $request, Application $app, $id)
    {
        $username = $request->get('username');
        $password = $request->get('password');
        $joined = $request->get('joined');
        $lastGrade = $request->get('lastGrade');
        $currentGrade = $request->get('currentGrade');

        $student = student::getOneById($id);

        $student->setUsername($username);
        $student->setPassword($password);
        $student->setJoined($joined);
        $student->setLastGrade($lastGrade);
        $student->setCurrentGrade($currentGrade);
        $insertSuccess = Student::update($student);

        if ($insertSuccess) {
            return $app->redirect('/admin');
        } else {
            print 'wrong try again';
            //$message = 'error - not able to CREATE item ';
            //$message .= '<pre>';
            // capture print_r output as a string
            // $message .= print_r($student, true);
            $templateName = 'updateStudentForm';
            return $app['twig']->render($templateName . '.html.twig', []);
        }
    }

    /**
     * update the techniques
     * @param Request $request
     * @param Application $app
     * @param $id
     * @return mixed
     */
    public function updateTechAction(Request $request, Application $app, $id)
    {
        $tech = Technique::getOneById($id);


        $argsArray = [
            'technique' => $tech
        ];

        $templateName = 'updateTechForm';
        return $app['twig']->render($templateName . '.html.twig', $argsArray);
    }

    /**
     * update the techniques
     * @param Request $request
     * @param Application $app
     * @param $id
     * @return \Symfony\Component\HttpFoundation\RedirectResponse
     */
    public function updateTechniqueAction(Request $request, Application $app, $id)
    {
        $desc = $request->get('description');
        $colour = $request->get('belt');


        $student = technique::getOneById($id);

        $student->setDescription($desc);
        $student->setBelt(colour);

        $insertSuccess = Technique::update($student);

        if ($insertSuccess) {
            return $app->redirect('/admin');
        } else {
            print 'wrong try again';
            //$message = 'error - not able to CREATE item ';
            //$message .= '<pre>';
            // capture print_r output as a string
            // $message .= print_r($student, true);
            $templateName = 'updateTechForm';
            return $app['twig']->render($templateName . '.html.twig', []);
        }
    }

    /**
     * new student
     * @param Request $request
     * @param Application $app
     * @return \Symfony\Component\HttpFoundation\RedirectResponse
     */
    public function createNewStudentAction(Request $request, Application $app)
    {
        $username = $request->get('username');
        $password = $request->get('password');
        $joined = $request->get('joined');
        $lastGrade = $request->get('lastGrade');
        $currentGrade = $request->get('currentGrade');

//        $username = filter_input(INPUT_POST, 'username', FILTER_SANITIZE_STRING);
//        $password = filter_input(INPUT_POST, 'password', FILTER_SANITIZE_STRING);
//        $joined = filter_input(INPUT_POST, 'joined', FILTER_SANITIZE_STRING);
//        $lastGrade = filter_input(INPUT_POST, 'lastGrade', FILTER_SANITIZE_STRING);
//        $currentGrade = filter_input(INPUT_POST, 'currentGrade', FILTER_SANITIZE_STRING);

        $student= new Student();
        $student->setUsername($username);
        $student->setPassword($password);
        $student->setJoined($joined);
        $student->setLastGrade($lastGrade);
        $student->setCurrentGrade($currentGrade);
        $insertSuccess = Student::insert($student);

  //      $grade = new Grading();

//        $date=(date("Y-m-d-h:i:sa"));

        //$grade->setDate($date);
        //$dateSuccess = Grading::insert($grade);


        if ($insertSuccess) {
            return $app->redirect('/admin');
        } else {
            print 'wrong try again';
            //$message = 'error - not able to CREATE item ';
            //$message .= '<pre>';
            // capture print_r output as a string
            // $message .= print_r($student, true);
            $templateName = 'newStudentForm';
            return $app['twig']->render($templateName . '.html.twig', []);
        }
    }

    /**
     * find username password in db
     * @param $username
     * @param $password
     * @return bool
     */
    public static function canFindMatchingUsernameAndPassword($username, $password)
    {
        $user = Student::getOneByUsername($username);

        // if no record has this username, return FALSE
        if (null == $user) {
            return false;
        }

        // hashed correct password
        $hashedStoredPassword = $user->getPassword();

//        print $hashedStoredPassword. $password;
//        die();
        // return whether or not hash of input password matches stored hash
        return password_verify($password, $hashedStoredPassword);
    }

    /**
     * get all belts
     * @param Request $request
     * @param Application $app
     * @return mixed
     */
    public static function beltAction(Request $request, Application $app)
    {
        $belts = Belt::getAll();

        $argsarray = [
           'belts' => $belts
       ];
        $templateName = 'belts';

        return $app['twig']->render($templateName . '.html.twig', $argsarray);
    }

    /**
     * techniques for each belt
     * @param Request $request
     * @param Application $app
     * @return mixed
     */
    public static function beltInfoAction(Request $request, Application $app)
    {
        $beltInfo = $request->get('color');

        $techniques = Technique::searchByColumn('belt', $beltInfo);

        $argsarray = [
            'techniques' => $techniques
        ];
        $templateName = 'beltsInfo';

        return $app['twig']->render($templateName . '.html.twig', $argsarray);
    }


    /**
     * time since last grade in months
     * @param $lastGrading
     * @return float
     */

    public function lastGrade($lastGrading)
    {
        $time = strtotime($lastGrading);
        $time = time() - $time; // to get the time since that moment

        $time = ($time < 1) ? 1 : $time;
        $token = 2592000;// this amount of untis is equal to one month

        $numberOfUnits = floor($time / $token);
        $months = $numberOfUnits;// . 'Months since last grading';
        return $months;
    }

    /**
     * work out time since last grade from student lastGrade
     * @param Request $request
     * @param Application $app
     * @return mixed
     */
    public function findLastGrade(Request $request, Application $app)
    {
        $lastGrade = $request->get('lastBelt');

        $timeSinceLastGrading = $this->lastGrade($lastGrade);

        if ($timeSinceLastGrading >= 2) {
            $message = 'Its time to upgrade to the next belt';

            $argsarray = [
                'lastGrade' => $timeSinceLastGrading,
                'message' => $message
            ];
            $templateName = 'lastGrade';
        } else {
            $message = 'Still need more training!';
            $argsarray = [
                'lastGrade' => $timeSinceLastGrading,
                'message' => $message
            ];
            $templateName = 'lastGrade';
        }
        return $app['twig']->render($templateName . '.html.twig', $argsarray);
    }
}

